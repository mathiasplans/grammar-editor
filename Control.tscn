[gd_scene load_steps=22 format=3 uid="uid://b05ly8tkkyqbc"]

[ext_resource type="Script" path="res://Root.gd" id="1"]
[ext_resource type="Script" path="res://Saver.gd" id="1_43r8s"]
[ext_resource type="Script" path="res://ToolOpt.gd" id="1_ac0rl"]
[ext_resource type="Script" path="res://Selector.gd" id="4"]
[ext_resource type="Script" path="res://TreeManager.gd" id="4_dt0xj"]
[ext_resource type="Script" path="res://AnchorManager.gd" id="5"]
[ext_resource type="Script" path="res://GrammarSymbolMaker.gd" id="6_j4m57"]
[ext_resource type="Script" path="res://Cursors.gd" id="6_miobu"]

[sub_resource type="GDScript" id="GDScript_wcrj7"]
script/source = "extends SpinBox

# This script only exists because the line edit does not
# relinquish the focus on submission

@onready var line = self.get_line_edit()

func _ready():
	self.line.text_submitted.connect(_on_text_submitted)
	
func _on_text_submitted(_new_text):
	self.line.release_focus()
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_k66y5"]
bg_color = Color(0.980392, 0.980392, 0.901961, 1)

[sub_resource type="Theme" id="Theme_wq57k"]

[sub_resource type="World3D" id="World3D_xikwn"]

[sub_resource type="Environment" id="1"]
background_mode = 1
background_color = Color(1, 1, 1, 1)
ambient_light_color = Color(1, 1, 1, 1)
ambient_light_energy = 0.7

[sub_resource type="GDScript" id="GDScript_cq0kr"]
resource_name = "RuleManager"
script/source = "extends Node
class_name RuleManager

signal rule_changed(old_rule, created)
signal rule_edited(rule)
signal symbol_displayed(symbol, display)
signal cut_created(cut_plane)

var current_symbol
var rules = {}
var current_rule
var rule_i = 0

# Persistant:
# * rules

func save():
	var data = {}
	for rule_key in self.rules:
		var sym = rule_key[0]
		var index = rule_key[1]
		
		var rule = self.rules[rule_key]
		var rule_save = rule.save()
		
		data[[sym.text, index]] = rule_save
		
	return data
	
func l(data):
	for sym_key in data:
		var sym_text = sym_key[0]
		var sym_index = sym_key[1]
		var symbol = %Symbols.get_symbol(sym_text)
		
		self.rules[[symbol, sym_index]].l(data[sym_key])
		
	$TreeManager.refresh_all()
	
func _ready():	
	# Connect signals
	$TreeManager.tree_edited.connect(self._edited)

func _on_cut_created(cut_plane):
	self.cut_created.emit(cut_plane)

func create_rule(symbol : GrammarSymbol, index):
	var shape = %Symbols.get_default_shape(symbol)
	var new_rule = Rule.new(shape, index)
	new_rule.add_reference_anchor(%Symbols.get_reference_anchor(symbol))

	# Tree handling
	$TreeManager.create_tree(new_rule, new_rule.from_shape_poly)
	
	self.rules[[symbol, index]] = new_rule
		
	# Connect signals
	new_rule.cut_created.connect(self._on_cut_created)
	
	# Switch to new rule
	self.set_to_rule(symbol, index)

	
	return new_rule
	
func remove_rule(symbol, index):
	# Get a random other rule
	var keys = self.rules.keys()
	
	if not keys.has([symbol, index]):
		return
		
	var new_key
	for key in keys:
		if key[1] != index:
			new_key = key
			break
	
	# Change to that rule
	if new_key != null:
		self.set_to_rule(new_key[0], new_key[1])
		
	else:
		self.set_to_no_rule()
		pass
		
	var rule = self.rules[[symbol, index]]
	
	# Remove the reference from the symbol
	symbol.remove_rule(index)
	
	# Free the resources
	$TreeManager.delete_tree(rule.split_tree)
	rule.queue_free()
	self.rules.erase([symbol, index])
	
func get_rule():
	return self.current_rule
	
func get_rule_index():
	return self.current_rule.index
	
func has_active_rule():
	return self.current_rule != null
	
func _rule_changed(old_rule, just_created):
	self.rule_changed.emit(old_rule, just_created)
	
	if self.current_rule != null:
		self.visaul_changed()
	
func set_to_no_rule():
	var old_symbol = self.current_symbol
	var old_rule = self.current_rule
	self.current_rule = null
	self.rule_i = -1
	$TreeManager.remove_tree()
	
	self.symbol_displayed.emit(old_symbol, false)
	self._rule_changed(old_rule, false)

func set_to_rule(symbol, index):
	if %Tester.active():
		return
	
	var replacement_rule = self.rules[[symbol, index]]
	var old_symbol = self.current_symbol
	var old_rule = self.current_rule
	self.current_rule = replacement_rule
	self.rule_i = index
	self.current_symbol = symbol
	$TreeManager.set_tree(self.current_rule.split_tree)
	
	self.symbol_displayed.emit(old_symbol, false)
	self._rule_changed(old_rule, self.current_rule.is_empty())
	
func set_to_symbol(symbol):
	if %Tester.active():
		return
	
	var old_symbol = self.current_symbol
	var old_rule = self.current_rule
	self.current_rule = null
	self.rule_i = 0
	self.current_symbol = symbol
	$TreeManager.remove_tree()
	
	self._rule_changed(old_rule, false)
	
	self.symbol_displayed.emit(old_symbol, false)
	self.symbol_displayed.emit(symbol, true)
	
func if_symbol_set_to_none(symbol):
	if self.current_rule == null and self.current_symbol == symbol:
		self.set_to_no_rule()
	
func is_compiled():
	return self.current_rule != null and self.current_rule.compiled
	
func _edited(rule=self.current_rule):
	if rule != null:
		rule.compiled = false
		self.rule_edited.emit(rule)
		
func visaul_changed(rule=self.current_rule):
	display_meshes(rule)
	
func get_from_shape():
	return self.current_rule.lhs
	
func get_from_shape_poly():
	if self.current_rule == null:
		if self.current_symbol != null:
			var shape = %Symbols.get_default_shape(self.current_symbol)
			return shape.get_polyhedron()
			
		return null
		
	else:
		return self.current_rule.from_shape_poly
		
func get_symbol_poly():
	if self.current_symbol != null:
		var shape = %Symbols.get_default_shape(self.current_symbol)
		return GB.get_polyhedron(shape)
	return null
	
func get_symbol():
	return self.current_symbol
	
func display_meshes(rule=self.current_rule):
	%Symbols.display_meshes(rule.get_symbol(), rule.index, rule.get_visible_meshes($TreeManager))
	
### Wrapper functions for the Tree Manager ###

func add_split(poly, cut_plane):
	$TreeManager.add_split(poly, cut_plane)
	self._edited()
	
func add_rotation(poly, rotation):
	$TreeManager.add_rotation(poly, rotation)
	self._edited()
	
func add_branch(cut, parent_treeitem, text, sym):
	$TreeManager.create_child_item(cut, parent_treeitem, text, sym)
	self._edited()
	
func compile(rule=self.current_rule):
	rule.compiled = true
	return $TreeManager.create_grammar_rule(rule)
	
func compile_all():
	for symbol_and_index in self.rules:
		var rule = self.rules[symbol_and_index]
		self.compile(rule)
	
### Wrapper functions for the Rule object ###

func get_pobj(poly, rule=self.current_rule):
	return rule.get_pobj(poly)
	
func set_visibility(poly, vis, rule=self.current_rule):
	rule.set_visibility(poly, vis)
	self.visaul_changed(rule)
		
func set_transparency(poly, t, rule=self.current_rule):
	rule.set_transparency(poly, t)
			
func set_collision(poly, c, rule=self.current_rule):
	rule.set_collision(poly, c)

func add_meshes(poly, rule=self.current_rule):
	var mesh_instances = rule.add_meshes(poly)
	self.display_meshes(rule)
	return mesh_instances
	
func get_meshes(poly, rule=self.current_rule):
	return rule.get_meshes(poly)
	
func erase_meshes(poly, rule=self.current_rule):
	rule.erase_meshes(poly)
		
func get_all_meshes(rule=self.current_rule):
	return rule.get_all_meshes()
	
func get_treeitem(poly, rule=self.current_rule):
	return rule.get_treeitem(poly)
	
func set_treeitem(poly, item, rule=self.current_rule):
	rule.set_treeitem(poly, item)
	
func set_leafness(poly, rule=self.current_rule):
	rule.set_leafness(poly)
	self._edited(rule)
	
func remove_leafness(poly, rule=self.current_rule):
	rule.remove_leafness(poly)
	$TreeManager.remove_leafness(poly, rule)
	self._edited(rule)
	
func is_leaf(poly, rule=self.current_rule):
	return rule.is_leaf(poly)
	
func get_leaf_polys(rule=self.current_rule):
	return rule.get_leaf_polys()

func add_anchor(poly, anchor, rule=self.current_rule):
	if self.get_anchor(poly, rule) == null:
		rule.add_anchor(poly, anchor)
		self._edited(rule)
	
func remove_anchor(poly, rule=self.current_rule):
	var anchor = self.get_anchor(poly, rule)
	
	if anchor != null:
		rule.remove_anchor(poly)
		self._edited(rule)
	
func get_anchor(poly, rule=self.current_rule):
	return rule.get_anchor(poly)

func get_polyhedrons(rule=self.current_rule):
	return rule.get_polyhedrons()

func get_vertices(transform, rule=self.current_rule):
	if rule != null:
		return rule.get_vertices(transform)
		
	elif self.current_symbol != null:
		return %Symbols.get_default_shape(self.current_symbol).get_vertices(transform)
		
	else:
		return null

func get_corners(transform, rule=self.current_rule):
	if rule != null:
		return rule.get_corners(transform)
		
	elif self.current_symbol != null:
		var sh = %Symbols.get_default_shape(self.current_symbol)
		return GB.get_vertices(sh, transform)
		
	else:
		return null
"

[sub_resource type="GDScript" id="GDScript_hr8ly"]
resource_name = "Tester"
script/source = "extends Node3D

@onready var apply_rule = %ToolOpt/TestOpt/ApplyRule
@onready var export_button = %ToolOpt/TestOpt/Export

var _shapes = []
var _terminals = []
var _shape_meshes = []
var _terminal_meshes = []

var _initial_shape

var rng = RandomNumberGenerator.new()

func _ready():
	self.apply_rule.button_down.connect(self._on_apply_rule_press)
	self.export_button.button_down.connect(self._on_export)
	
func _input(event):
	if self.active():
		if event is InputEventKey:
			if event.pressed:
				if event.keycode == KEY_ENTER:
					self._on_apply_rule_press()

static func _add_random_color(mesh_instances):
	var newMat = ColorManager.get_contoured_mat()
	for mesh_instance in mesh_instances:
		mesh_instance.set_surface_override_material(0, newMat)


func _add_terminal(terminal_shape):
	self._terminals.push_back(terminal_shape)

	var _meshes = GB.get_contoured_meshes(terminal_shape)
	var mesh_instances = []
	for mesh in _meshes:
		var new_inst = MeshInstance3D.new()
		new_inst.mesh = mesh
		mesh_instances.push_back(new_inst)
		
	_add_random_color(mesh_instances)
	
	for mi in mesh_instances:
		self._terminal_meshes.push_back(mi)
		self.add_child(mi)
		
func _clear_terminals():
	for tm in self._terminal_meshes:
		tm.queue_free()
		
	self._terminal_meshes = []
	self._terminals = []

func _refresh_shapes():
	# Free the old shapes
	for sm in self._shape_meshes:
		sm.queue_free()
		
	self._shape_meshes = []
		
	# Add the new shape to the Tester
	for shape in self._shapes:
		var _meshes = GB.get_contoured_meshes(shape)
		var mesh_instances = []
		for mesh in _meshes:
			var new_inst = MeshInstance3D.new()
			new_inst.mesh = mesh
			mesh_instances.push_back(new_inst)
			
		_add_random_color(mesh_instances)
		
		for mi in mesh_instances:
			self._shape_meshes.push_back(mi)
			self.add_child(mi)

# Fulfill a grammar
func _on_apply_rule_press():
	var old_shape_names = []
	var new_shape_names = []
	var new_shapes = []
	for shape in self._shapes:
		old_shape_names.append(shape.symbol.text)
		
		# Get the rule
		var grammar_rule = shape.symbol.select_rule(rng)
		
		# No rules, keep the shape
		if grammar_rule == null:
			new_shapes.append(shape)
			
		else:
			var shapes = grammar_rule.fulfill(shape)
			
			new_shapes.append_array(shapes)
	
	# Split the new array between shapes and terminals
	self._shapes = []
	for shape in new_shapes:
		new_shape_names.append(shape.symbol.text)
		
		if shape.symbol.is_terminal():
			self._add_terminal(shape)
			
		else:
			self._shapes.push_back(shape)
	
	print(old_shape_names, \" -> \", new_shape_names)
	
	self._refresh_shapes()

func _notification(what):
	if what == NOTIFICATION_VISIBILITY_CHANGED:
		self._on_visibility_changed()
		
func active():
	return self._shapes.size() != 0 or self._terminals.size() != 0
	
var tools_vis = false
var tree_vis = false
var explorer_vis = false

func _on_visibility_changed():
	if not self.active():
		# Compile the grammar
		%RuleManager.compile_all()
		
		var root_poly = %RuleManager.get_symbol_poly()
		
		var new_shape = GrammarShape.new(%RuleManager.get_symbol(), root_poly.vertices)
		self._shapes.push_back(new_shape)
		
		self._refresh_shapes()
		
		self.tools_vis = %ToolInfo.visible
		%ToolInfo.visible = false
		
		self.tree_vis = %TreeParent.visible
		%TreeParent.visible = false
		
		self.explorer_vis = %ExplorerButton.get_state()
		%ExplorerButton.close()
		
		self._initial_shape = new_shape
		
	else:
		self._shapes = []
		
		self._refresh_shapes()
		self._clear_terminals()
		
		%ToolInfo.visible = self.tools_vis
		%TreeParent.visible = self.tree_vis
		%ExplorerButton.set_state_keep_open(self.explorer_vis)
		
		self._initial_shape = null
		
func get_vertices():
	var verts = []
	var gt = self.global_transform
	for shape in _shapes:
		for vert in shape.vertices:
			verts.append(gt * vert)
			
	for shape in _terminals:
		for vert in shape.vertices:
			verts.append(gt * vert)
			
	return verts

func get_corners():
	var verts = []
	var gt = self.global_transform
	
	for vert in self._initial_shape.vertices:
		verts.append(gt * vert)
		
	return verts
	
func _on_export():
	var meshes = []
	
	for mi in self._shape_meshes:
		meshes.append(mi.mesh)
		
	for mi in self._terminal_meshes:
		meshes.append(mi.mesh)

	%Persistance.save_meshes_as_stl(meshes)
"

[sub_resource type="GDScript" id="GDScript_besah"]
resource_name = "Editor"
script/source = "extends Node3D
class_name Editor

var rng = RandomNumberGenerator.new()

@onready var global_cut = %ToolOpt/FaceCutOpt/GlobalCut

func poly_to_meshes(poly):
	%RuleManager.add_meshes(poly)
	
func draw_rule():
	if %RuleManager.current_rule != null:
		$Meshes.add_child(%RuleManager.current_rule)
		%ToolInfo.visible = true
		%TreeParent.visible = true
		
	else:
		%ToolInfo.visible = false
		%TreeParent.visible = false
		
func draw_symbol():
	if %RuleManager.symbol != null:
		%ToolInfo.visible = false
		%TreeParent.visible = false
	
# Called when the node enters the scene tree for the first time.
func _ready():
	# Anchor manager
	$AnchorManager.polyhedron_reordered.connect(self._on_poly_reorder)
	
	%RuleManager.rule_changed.connect(self._on_rule_change)
	%RuleManager.symbol_displayed.connect(self._on_symbol_display)
	%RuleManager.cut_created.connect(self._on_create_cut)
	
	$Cursors.create_cut.connect(self._on_cut_complete)
	
# Called when an event happens
func _input(event):
	# Undo and Redo mechanic. TODO: in root
	if event is InputEventKey:
		if event.pressed and event.keycode == KEY_Z and event.ctrl_pressed:
			pass # TODO

# When a cut has been made, add the cutting plane
# mesh as a child and connect the 'cut_complete' signal
func _on_create_cut(cut_plane):
	# Make the cut plane rotate with the poly
	%RuleManager.current_rule.add_child(cut_plane)
	
	# Subscribe to the cut completion callback
	cut_plane.cut_complete.connect(_on_cut_complete)

func _add_child_polyhedron(cut, parent_treeitem, text, sym=null):
	# Update the tree
	%RuleManager.add_branch(cut, parent_treeitem, text, sym)
	
	# Add new meshes
	var new_poly = cut[0]
	self.poly_to_meshes(new_poly)
	
func _cut_poly(cut_planes, poly):
	var points = []
	var normals = []
	
	for cut_plane in cut_planes:
		points.push_back(cut_plane.point())
		normals.push_back(cut_plane.normal)
	
	var cutdata = poly.multi_cut(points, normals)
	
	# No cut was made, do nothing
	if cutdata.size() == 1:
		# Flag the cut_plane to delete itself
		for cut_plane in cut_planes:
			cut_plane.delete = true
			
		return

	# Free the old meshes
	%RuleManager.erase_meshes(poly)
	%RuleManager.remove_leafness(poly)
	
	for cut_plane in cut_planes:
		if cut_plane.poly == poly:
			%RuleManager.add_split(poly, cut_plane)

	# Handle new polyhedrons
	for cut in cutdata:
		self._add_child_polyhedron(cut, poly, \"B\")

# On the cut completion, cut the polygon
func _on_cut_complete(cut_planes, _poly):
	if self.global_cut.button_pressed:
		var leaves = %RuleManager.get_leaf_polys().duplicate()
		for leaf in leaves:
			self._cut_poly(cut_planes, leaf)
		
	elif _poly is Polyhedron:
		self._cut_poly(cut_planes, _poly)
		
	else:
		var leaves = %RuleManager.get_leaf_polys().duplicate()
		for leaf in leaves:
			var new_cut_planes = []
			for cut_plane in cut_planes:
				if leaf.intersects_face(cut_plane.hull):
					new_cut_planes.push_back(cut_plane)
					
			if new_cut_planes.size() > 0:
				self._cut_poly(new_cut_planes, leaf)
	
	# Hide the cut
	for cut_plane in cut_planes:
		cut_plane.visible = false

func _on_poly_reorder(poly, new_order):
	# Remove old meshes
	%RuleManager.erase_meshes(poly)
	
	# Add new meshes
	self.poly_to_meshes(poly)
	
	# TODO: add the rotation info to the tree
	%RuleManager.add_rotation(poly, new_order)
	
func _on_rule_change(old_rule, created):
	# Orphan the old rule, if it exists
	if old_rule != null:
		$Selector.select_clear(null, old_rule)
		
		# This is important, otherwise will crash when trying to select
		# again
		old_rule.split_tree.deselect_all()
		
		# Remove all children of meshes
		$Meshes.remove_child(old_rule)
	
	# Create new meshes if the rule is new
	if created:
		var initial_poly = %RuleManager.get_from_shape_poly()
		self.poly_to_meshes(initial_poly)

	# Add new meshes
	self.draw_rule()

func _on_symbol_display(symbol, display):
	if symbol != null:
		var symbol_object = %Symbols.get_symbol_object(symbol)
		if not display:
			var parent = symbol_object.get_parent()
			if parent == $Meshes:
				$Meshes.remove_child(symbol_object)
				
		else:
			$Meshes.add_child(symbol_object)
			
func get_vertices():
	var gt = self.global_transform
	var verts = %RuleManager.get_vertices(gt)
	return verts
	
func get_corners():
	var gt = self.global_transform
	var verts = %RuleManager.get_corners(gt)
	return verts
"

[sub_resource type="SphereMesh" id="SphereMesh_4nkvx"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_aipi0"]
resource_name = "red_cursor"
shading_mode = 2
specular_mode = 2
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="GDScript" id="GDScript_r1mpe"]
resource_name = "AddSymbol"
script/source = "extends Button

const symbol_rules = preload(\"res://SymbolRules.tscn\")
var syms = {}

func save():
	var syms_named = {}
	for sym in syms:
		var d = syms[sym]
		var poly = d[0]
		var obj = d[1]
		var poly_save = poly.save()
		var obj_save = obj.save()
		
		syms_named[sym.text] = [poly_save, obj_save]
		
	return [syms_named]
		
func l(data):
	# Remove old
	for sym in syms.keys().duplicate():
		syms[sym][1].delete_symbol()
		
	self.syms = {}
	
	# Add new
	for sym_text in data[0]:
		var d = data[0][sym_text]
		var poly_save = d[0]
		var obj_save = d[1]
	
		var poly = Polyhedron.from_data(poly_save)
		
		# Create symbol
		var obj = await self.create_symbol(poly, sym_text)
		obj.l(obj_save)
		
	pass

func create_symbol(poly, _name=null):
	%ToolOpt.end_mode()
	
	poly = poly.create_copy()
	poly.center_scale(0.8)
	
	# Symbol handling
	poly.original = true
	poly.order_by_anchor(0, 1)
	var sym = %Symbols.from_polyhedron(poly, false)
	poly.symbol = sym
	
	if _name is String:
		%Symbols.rename(sym, _name)

	var new_symbol_rules = symbol_rules.instantiate()
	new_symbol_rules.symbol = sym
	%SymbolRules.add_child.call_deferred(new_symbol_rules)
	await new_symbol_rules.ready
	
	# Connect signals
	new_symbol_rules.rule_created.connect(_on_rule_create)
	new_symbol_rules.rule_selected.connect(_on_rule_select)
	new_symbol_rules.rule_deleted.connect(_on_rule_delete)
	
	new_symbol_rules.symbol_renamed.connect(_on_symbol_rename)
	new_symbol_rules.symbol_selected.connect(_on_symbol_select)
	new_symbol_rules.symbol_deleted.connect(_on_symbol_delete)
	
	self.syms[sym] = [poly, new_symbol_rules]
	
	# Change the ordering of the elements
	var instance_i = new_symbol_rules.get_index()
	%SymbolRules.move_child(new_symbol_rules, instance_i - 1)
	
	%RuleManager.set_to_symbol(sym)
	
	%Symbols.add_button(sym, new_symbol_rules)
	
	return new_symbol_rules
	
func add_symbol():
	pass

func _pressed():
	# Create a cube for now
	var cube = Cube.new(0.4)
	await self.create_symbol(cube)

func _on_rule_create(symbol, index):
	%ToolOpt.end_mode()
	%RuleManager.create_rule(symbol, index)
	
func _on_rule_select(symbol, index):
	%RuleManager.set_to_rule(symbol, index)
	
func _on_rule_delete(symbol, index):
	%RuleManager.remove_rule(symbol, index)
	
func _on_symbol_rename(symbol, new_text):
	%Symbols.rename(symbol, new_text)
	
func _on_symbol_select(symbol):
	%RuleManager.set_to_symbol(symbol)
	
func _on_symbol_delete(symbol):
	self.syms.erase(symbol)
	%Symbols.delete_symbol(symbol)
	
func _ready():
	# Enable loading screen
	%Loading.visible = true
	
	# Create a cube for now
	var cube = Cube.new(0.4)
	var component = await self.create_symbol(cube)
	component.create_rule()
	await self.get_tree().process_frame
	await self.get_tree().process_frame
	await self.get_tree().process_frame
	component.delete_symbol()
	
	%Loading.visible = false
"

[sub_resource type="GDScript" id="GDScript_s8l8w"]
resource_name = "ExplorerButton"
script/source = "extends Button

func _pressed():
	%Explorer.visible = not %Explorer.visible
	%Left.collapsed = not %Left.collapsed
	
func get_state():
	return not %Left.collapsed
	
func set_state(state):
	if state:
		self.open()
		
	else:
		self.close()
		
func set_state_keep_open(state):
	if state:
		self.open()

func open():
	%Explorer.visible = true
	%Left.collapsed = false
	
func close():
	%Explorer.visible = false
	%Left.collapsed = true
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_mi2ym"]
bg_color = Color(0.294118, 0.294118, 0.294118, 1)

[node name="Control" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="Persistance" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource("1_43r8s")

[node name="SaveFile" type="FileDialog" parent="Persistance"]
position = Vector2i(200, 150)
size = Vector2i(700, 400)
ok_button_text = "Save"
access = 2

[node name="LoadFile" type="FileDialog" parent="Persistance"]
title = "Open a File"
position = Vector2i(200, 150)
size = Vector2i(700, 400)
ok_button_text = "Open"
file_mode = 0
access = 2

[node name="Project" type="Window" parent="Persistance"]
title = "Project"
position = Vector2i(200, 200)
size = Vector2i(180, 159)
visible = false
wrap_controls = true

[node name="MarginContainer" type="MarginContainer" parent="Persistance/Project"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 80.0
offset_bottom = 59.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="GridContainer" type="GridContainer" parent="Persistance/Project/MarginContainer"]
layout_mode = 2
theme_override_constants/h_separation = 10
theme_override_constants/v_separation = 5
columns = 2

[node name="SaveButton" type="Button" parent="Persistance/Project/MarginContainer/GridContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Save"

[node name="Label" type="Label" parent="Persistance/Project/MarginContainer/GridContainer"]
layout_mode = 2
text = "Ctrl-S"
vertical_alignment = 1

[node name="SaveAsButton" type="Button" parent="Persistance/Project/MarginContainer/GridContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Save As"

[node name="Label2" type="Label" parent="Persistance/Project/MarginContainer/GridContainer"]
layout_mode = 2
text = "Ctrl-Shift-S"
vertical_alignment = 1

[node name="LoadButton" type="Button" parent="Persistance/Project/MarginContainer/GridContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Load"

[node name="Label3" type="Label" parent="Persistance/Project/MarginContainer/GridContainer"]
layout_mode = 2
text = "Ctrl-L"
vertical_alignment = 1

[node name="ExportButton" type="Button" parent="Persistance/Project/MarginContainer/GridContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Export"

[node name="Label4" type="Label" parent="Persistance/Project/MarginContainer/GridContainer"]
layout_mode = 2
text = "Ctrl-B"
vertical_alignment = 1

[node name="HSplitContainer" type="HSplitContainer" parent="."]
custom_minimum_size = Vector2(1024, 600)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Left" type="VSplitContainer" parent="HSplitContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(750, 0)
layout_mode = 2
size_flags_horizontal = 3

[node name="RuleEditor" type="VSplitContainer" parent="HSplitContainer/Left"]
layout_mode = 2
size_flags_vertical = 3

[node name="ToolOpt" type="HSplitContainer" parent="HSplitContainer/Left/RuleEditor"]
unique_name_in_owner = true
layout_mode = 2
script = ExtResource("1_ac0rl")

[node name="RuleOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
unique_name_in_owner = true
layout_mode = 2

[node name="TestGrammar" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolOpt/RuleOpt"]
layout_mode = 2
tooltip_text = "Test the grammar rules on the currently selected symbol"
toggle_mode = true
text = "Test"

[node name="ProjectButton" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolOpt/RuleOpt"]
layout_mode = 2
text = "Project"

[node name="FaceCutOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
visible = false
layout_mode = 2

[node name="GlobalCut" type="CheckButton" parent="HSplitContainer/Left/RuleEditor/ToolOpt/FaceCutOpt"]
layout_mode = 2
text = "Global"

[node name="TriPointCutOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
visible = false
layout_mode = 2

[node name="TestOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
visible = false
layout_mode = 2

[node name="ApplyRule" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolOpt/TestOpt"]
layout_mode = 2
text = "New Gen"

[node name="Export" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolOpt/TestOpt"]
layout_mode = 2
text = "Export"

[node name="PrismCutOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
visible = false
layout_mode = 2

[node name="MultiCutOpt" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolOpt"]
visible = false
layout_mode = 2

[node name="SpinBox" type="SpinBox" parent="HSplitContainer/Left/RuleEditor/ToolOpt/MultiCutOpt"]
layout_mode = 2
min_value = 1.0
max_value = 10.0
value = 1.0
suffix = "cuts"
script = SubResource("GDScript_wcrj7")

[node name="ToolsView" type="HSplitContainer" parent="HSplitContainer/Left/RuleEditor"]
layout_mode = 2
collapsed = true
dragger_visibility = 2

[node name="ToolInfo" type="GridContainer" parent="HSplitContainer/Left/RuleEditor/ToolsView"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_horizontal = 0

[node name="Label" type="Label" parent="HSplitContainer/Left/RuleEditor/ToolsView/ToolInfo"]
layout_mode = 2
text = "Tools"
horizontal_alignment = 1

[node name="FaceCut" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolsView/ToolInfo"]
layout_mode = 2
tooltip_text = "Create a cutting plane by selecting a face and then pressing \"C\". Move the plane to a suitable place and click RMB to create a cut."
toggle_mode = true
text = "Face Cut"

[node name="TriPointCut" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolsView/ToolInfo"]
layout_mode = 2
tooltip_text = "Specify three points by clicking RMB. The points define a cutting plane, which is used to cut the shape."
toggle_mode = true
text = "3-Point Cut"

[node name="PrismCut" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolsView/ToolInfo"]
layout_mode = 2
tooltip_text = "Create a cutting plane by selecting a base of a prism and pressing \"C\". Move the plane to a suitable place and click RMB to create a cut."
toggle_mode = true
text = "Prism Cut"

[node name="MultiCut" type="Button" parent="HSplitContainer/Left/RuleEditor/ToolsView/ToolInfo"]
layout_mode = 2
tooltip_text = "Specify the number of cuts, select a base of a prism, and press \"C\" to partition the prism into multiple equal parts."
toggle_mode = true
text = "Multi Cut"

[node name="BG" type="PanelContainer" parent="HSplitContainer/Left/RuleEditor/ToolsView"]
layout_mode = 2
mouse_filter = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_k66y5")

[node name="SVC" type="SubViewportContainer" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme = SubResource("Theme_wq57k")
stretch = true

[node name="SV" type="SubViewport" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC"]
own_world_3d = true
world_3d = SubResource("World3D_xikwn")
transparent_bg = true
handle_input_locally = false
msaa_3d = 3
scaling_3d_scale = 2.0
physics_object_picking = true
size = Vector2i(1152, 356)
render_target_update_mode = 4

[node name="Cam" type="Camera3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV"]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.54398)
environment = SubResource("1")

[node name="Root" type="Node3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV"]
script = ExtResource("1")

[node name="RuleManager" type="Node" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root"]
unique_name_in_owner = true
script = SubResource("GDScript_cq0kr")

[node name="TreeManager" type="Node" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/RuleManager"]
script = ExtResource("4_dt0xj")

[node name="Tester" type="Node3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root"]
unique_name_in_owner = true
visible = false
script = SubResource("GDScript_hr8ly")

[node name="Editor" type="Node3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root"]
unique_name_in_owner = true
script = SubResource("GDScript_besah")

[node name="Selector" type="Node" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor"]
script = ExtResource("4")

[node name="AnchorManager" type="Node" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor"]
script = ExtResource("5")

[node name="Meshes" type="Node3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor"]

[node name="Cursors" type="Node3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor"]
script = ExtResource("6_miobu")

[node name="Cursor1" type="MeshInstance3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor/Cursors"]
transform = Transform3D(0.07, 0, 0, 0, 0.07, 0, 0, 0, 0.07, 0, 0, 0)
visible = false
mesh = SubResource("SphereMesh_4nkvx")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("StandardMaterial3D_aipi0")

[node name="Cursor2" type="MeshInstance3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor/Cursors"]
transform = Transform3D(0.07, 0, 0, 0, 0.07, 0, 0, 0, 0.07, 0, 0, 0)
visible = false
mesh = SubResource("SphereMesh_4nkvx")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("StandardMaterial3D_aipi0")

[node name="Cursor3" type="MeshInstance3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root/Editor/Cursors"]
transform = Transform3D(0.07, 0, 0, 0, 0.07, 0, 0, 0, 0.07, 0, 0, 0)
visible = false
mesh = SubResource("SphereMesh_4nkvx")
skeleton = NodePath("../..")
surface_material_override/0 = SubResource("StandardMaterial3D_aipi0")

[node name="Symbols" type="Node" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV/Root"]
unique_name_in_owner = true
script = ExtResource("6_j4m57")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="HSplitContainer/Left/RuleEditor/ToolsView/BG/SVC/SV"]
transform = Transform3D(0.656559, 0, 0.754274, 0, 1, 0, -0.754274, 0, 0.656559, 1.85974, 0, 0.65363)
light_energy = 0.3

[node name="ExplorerWindow" type="VSplitContainer" parent="HSplitContainer/Left"]
layout_mode = 2
dragger_visibility = 2

[node name="Explorer" type="TabContainer" parent="HSplitContainer/Left/ExplorerWindow"]
unique_name_in_owner = true
layout_mode = 2
size_flags_vertical = 3

[node name="Symbols" type="ScrollContainer" parent="HSplitContainer/Left/ExplorerWindow/Explorer"]
custom_minimum_size = Vector2(750, 140)
layout_mode = 2

[node name="SymbolRules" type="GridContainer" parent="HSplitContainer/Left/ExplorerWindow/Explorer/Symbols"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="PanelContainer" type="MarginContainer" parent="HSplitContainer/Left/ExplorerWindow/Explorer/Symbols/SymbolRules"]
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 0
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 5

[node name="AddSymbol" type="Button" parent="HSplitContainer/Left/ExplorerWindow/Explorer/Symbols/SymbolRules/PanelContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 4
text = "New Symbol"
script = SubResource("GDScript_r1mpe")

[node name="PanelContainer" type="PanelContainer" parent="HSplitContainer/Left/ExplorerWindow"]
layout_mode = 2
size_flags_vertical = 8

[node name="HBoxContainer" type="HBoxContainer" parent="HSplitContainer/Left/ExplorerWindow/PanelContainer"]
custom_minimum_size = Vector2(0, 25)
layout_mode = 2

[node name="ExplorerButton" type="Button" parent="HSplitContainer/Left/ExplorerWindow/PanelContainer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Symbols"
script = SubResource("GDScript_s8l8w")

[node name="TreeParent" type="VSplitContainer" parent="HSplitContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(300, 0)
layout_mode = 2

[node name="Loading" type="Panel" parent="."]
unique_name_in_owner = true
visible = false
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_mi2ym")
